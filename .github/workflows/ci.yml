name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      continue-on-error: true

    - name: Make scripts executable
      run: chmod +x scripts/*.sh scripts/*.js

    - name: Lint shell scripts
      run: |
        # Install shellcheck on Ubuntu
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y shellcheck
        fi
        # Install shellcheck on macOS
        if [ "$RUNNER_OS" == "macOS" ]; then
          brew install shellcheck
        fi
        # Run shellcheck on all shell scripts
        find scripts -name "*.sh" -exec shellcheck {} \;

    - name: Test script syntax and basic validation
      run: |
        # Test that Node.js script has valid syntax
        node -c scripts/prd-task-generator.js && echo "‚úÖ JavaScript syntax valid"
        
        # Test that shell scripts have valid syntax
        bash -n scripts/prd-helper.sh && echo "‚úÖ Shell script syntax valid"
        bash -n scripts/setup.sh && echo "‚úÖ Setup script syntax valid"
        
    - name: Test file structure and dependencies
      run: |
        # Verify all required files exist
        test -f scripts/prd-helper.sh && echo "‚úÖ prd-helper.sh exists"
        test -f scripts/prd-task-generator.js && echo "‚úÖ prd-task-generator.js exists"
        test -f scripts/setup.sh && echo "‚úÖ setup.sh exists"
        test -f templates/prd-template.md && echo "‚úÖ PRD template exists"
        test -f examples/todo-app/docs/prd.md && echo "‚úÖ Example PRD exists"
        
        # Test scripts are executable
        test -x scripts/prd-helper.sh && echo "‚úÖ prd-helper.sh is executable"
        test -x scripts/setup.sh && echo "‚úÖ setup.sh is executable"

    - name: Test PRD parsing capability
      run: |
        # Test that the task generator can read the example PRD without errors
        # We'll run it in a way that validates the file parsing but doesn't require full execution
        if [ -f "examples/todo-app/docs/prd.md" ]; then
          # Check that the file is readable and has expected content
          grep -q "## Functional Requirements" examples/todo-app/docs/prd.md && echo "‚úÖ Example PRD has functional requirements section"
          grep -q "## Technical Requirements" examples/todo-app/docs/prd.md && echo "‚úÖ Example PRD has technical requirements section"
          
          # Test that Node.js can read the file (basic file access test)
          node -e "
            const fs = require('fs');
            const content = fs.readFileSync('examples/todo-app/docs/prd.md', 'utf8');
            if (content.length > 100) {
              console.log('‚úÖ Example PRD file is readable and has content');
            } else {
              console.log('‚ùå Example PRD file appears to be empty or corrupted');
              process.exit(1);
            }
          "
        else
          echo "‚ùå Example PRD not found"
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      continue-on-error: true

    - name: Lint JavaScript
      run: |
        # Check if eslint is available and run it
        if command -v npx eslint &> /dev/null; then
          npx eslint scripts/*.js || echo "ESLint completed with warnings"
        else
          echo "ESLint not available, skipping JS linting"
        fi

    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        folder-path: 'docs'
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "üìö Checking documentation..."
        
        # Check that all referenced files exist
        required_files=(
          "README.md"
          "CONTRIBUTING.md"
          "LICENSE"
          "CHANGELOG.md"
          "docs/installation.md"
          "docs/user-guide.md"
          "docs/faq.md"
          "examples/todo-app/README.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "‚úÖ All required documentation files present"

    - name: Validate example project structure
      run: |
        echo "üèóÔ∏è Checking example project structure..."
        
        example_files=(
          "examples/todo-app/docs/prd.md"
          "examples/todo-app/docs/tasks.md"
          "examples/todo-app/README.md"
        )
        
        for file in "${example_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "‚úÖ Example project structure valid"
